MSvars = MSvars[,c(-'normerr')]
MSvars = summary[which(summary[,1]%in% studvars),]
MSvars = MSvars[,c(-'normerr')]
MSvars = MSvars[,-5]
MSvars
sprintf("%.3f", pi)
sprintf("%.3f", MSvars)
MSvars[,2:8] = as.numeric(as.character(MSvars[,2:8]))
sprintf("%.3f", MSvars[,2])
sprintf("%.3s", MSvars[,2])
sprintf("%.3f", MSvars[,2])
class(MSvars[,2])
sprintf("%.3f", as.numeric(MSvars[,2]))
for(i in 2:ncol(MSvars)){
MSvars[,i] = sprintf("%.3f", as.numeric(MSvars[,i]))
}
MSvars
colnames(MSvars) = c('var', 'mean error', 'mean absolute anomaly', 'median absolute anomaly', 'RMSE', 'r2', 'pearson', 'spearman')
print(MSvars)
write.table('MSvars', file = 'MSvars.tab', sep='\t')
list.files()
read.table('MSvars.tab')
write.table(MSvars, file = 'MSvars.tab', sep='\t')
read.table("MSvars.tab")
library(vegdistmod)
gbif_get('Olneya tesota')
taxon = "Olneya tesota"
n = 0
round = 0
hold = list()
offset = 0
tori = taxon;
taxon = urltools::url_encode(taxon)
while (n < 1) {
html_str = paste(
"https://api.gbif.org/v1/occurrence/search?scientificName=",
taxon,
"&limit=300&offset=",
offset,
sep = ''
)
jsonget = jsonlite::fromJSON(html_str)
round = round + 1
if (is.null(nrow(jsonget$results))) {
print("ERR: 11")
return(jsonget)
} else {
hold[[round]] = jsonget$results
}
if (jsonget$endOfRecords == TRUE) {
n = 1
} else {
offset = offset + 300
}
if (offset > maxrec) {
break
}
}
maxrec = 2000
while (n < 1) {
html_str = paste(
"https://api.gbif.org/v1/occurrence/search?scientificName=",
taxon,
"&limit=300&offset=",
offset,
sep = ''
)
jsonget = jsonlite::fromJSON(html_str)
round = round + 1
if (is.null(nrow(jsonget$results))) {
print("ERR: 11")
return(jsonget)
} else {
hold[[round]] = jsonget$results
}
if (jsonget$endOfRecords == TRUE) {
n = 1
} else {
offset = offset + 300
}
if (offset > maxrec) {
break
}
}
hold[[1]]
df = hold[[1]][, c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude'
)]
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
nex = hold[[n]][, c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude'
)]
df = rbind(df, nex)
}
}
df
head(df)
nex = hold[[n]][, c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude'
)]
head(df)
colnames(df)
hold[[n]]
colnames(hold[[n]])
hold[[n]][,'key']
hold[[n]][,'genus']
hold[[n]][,'specificEpithet']
hold[[n]][,'decimalLatitude']
hold[[n]][,'decimalLongitude']
summary(hold[[n]])
length(hold)
n
hold[[n]]
df = hold[[1]][, c(cols )]
cols = c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude');
df = hold[[1]][, c(cols )]
nex = hold[[n]][, c(cols)]
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if()
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
}
}
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
}
}
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if(cols %in% colnames(hold[[n]])){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
df
nrow(df)
df[,2] = paste(df[,2], df[,3]);
df = df[,-3];
colnames(df) = c('ind_id', 'tax', 'lat', 'lon')
df$tax = rep(tori, nrow(df));
return(df)
gbif_get <- function(taxon, maxrec = 200000) {
# require('jsonlite');
#require('urltools')
n = 0
round = 0
hold = list()
offset = 0
tori = taxon;
taxon = urltools::url_encode(taxon)
while (n < 1) {
html_str = paste(
"https://api.gbif.org/v1/occurrence/search?scientificName=",
taxon,
"&limit=300&offset=",
offset,
sep = ''
)
jsonget = jsonlite::fromJSON(html_str)
round = round + 1
if (is.null(nrow(jsonget$results))) {
print("ERR: 11")
return(jsonget)
} else {
hold[[round]] = jsonget$results
}
if (jsonget$endOfRecords == TRUE) {
n = 1
} else {
offset = offset + 300
}
if (offset > maxrec) {
break
}
}
cols = c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude');
df = hold[[1]][, c(cols )]
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
df[,2] = paste(df[,2], df[,3]);
df = df[,-3];
colnames(df) = c('ind_id', 'tax', 'lat', 'lon')
df$tax = rep(tori, nrow(df));
return(df)
}
gbif_get(taxon)
gbif_get <- function(taxon, maxrec = 200000) {
# require('jsonlite');
#require('urltools')
n = 0
round = 0
hold = list()
offset = 0
tori = taxon;
taxon = urltools::url_encode(taxon)
while (n < 1) {
html_str = paste(
"https://api.gbif.org/v1/occurrence/search?scientificName=",
taxon,
"&limit=300&offset=",
offset,
sep = ''
)
jsonget = jsonlite::fromJSON(html_str)
round = round + 1
if (is.null(nrow(jsonget$results))) {
print("ERR: 11")
return(jsonget)
} else {
hold[[round]] = jsonget$results
}
if (jsonget$endOfRecords == TRUE) {
n = 1
} else {
offset = offset + 300
}
if (offset > maxrec) {
break
}
}
cols = c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude');
df = hold[[1]][, c(cols )]
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
df[,2] = paste(df[,2], df[,3], sep = ' ');
df = df[,-3];
colnames(df) = c('ind_id', 'tax', 'lat', 'lon')
df$tax = rep(tori, nrow(df));
return(df)
}
gbif_get(taxon)
gbif_get <- function(taxon, maxrec = 200000) {
# require('jsonlite');
#require('urltools')
n = 0
round = 0
hold = list()
offset = 0
tori = taxon;
taxon = urltools::url_encode(taxon)
while (n < 1) {
html_str = paste(
"https://api.gbif.org/v1/occurrence/search?scientificName=",
taxon,
"&limit=300&offset=",
offset,
sep = ''
)
jsonget = jsonlite::fromJSON(html_str)
round = round + 1
if (is.null(nrow(jsonget$results))) {
print("ERR: 11")
return(jsonget)
} else {
hold[[round]] = jsonget$results
}
if (jsonget$endOfRecords == TRUE) {
n = 1
} else {
offset = offset + 300
}
if (offset > maxrec) {
break
}
}
cols = c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude');
df = hold[[1]][, c(cols )]
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
df[,2] = paste(df[,2], df[,3], sep = '_');
df = df[,-3];
colnames(df) = c('ind_id', 'tax', 'lat', 'lon')
df$tax = rep(tori, nrow(df));
return(df)
}
gbif_get(taxon)
gbif_get <- function(taxon, maxrec = 200000) {
# require('jsonlite');
#require('urltools')
n = 0
round = 0
hold = list()
offset = 0
tori = taxon;
taxon = urltools::url_encode(taxon)
while (n < 1) {
html_str = paste(
"https://api.gbif.org/v1/occurrence/search?scientificName=",
taxon,
"&limit=300&offset=",
offset,
sep = ''
)
jsonget = jsonlite::fromJSON(html_str)
round = round + 1
if (is.null(nrow(jsonget$results))) {
print("ERR: 11")
return(jsonget)
} else {
hold[[round]] = jsonget$results
}
if (jsonget$endOfRecords == TRUE) {
n = 1
} else {
offset = offset + 300
}
if (offset > maxrec) {
break
}
}
cols = c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude');
df = hold[[1]][, c(cols )]
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
df[,2] = paste(df[,2], df[,3], sep = '_');
df = df[,-3];
colnames(df) = c('ind_id', 'tax', 'lat', 'lon')
#df$tax = rep(tori, nrow(df));
return(df)
}
gbif_get(taxon)
gbif_get <- function(taxon, maxrec = 200000) {
# require('jsonlite');
#require('urltools')
n = 0
round = 0
hold = list()
offset = 0
tori = taxon;
taxon = urltools::url_encode(taxon)
while (n < 1) {
html_str = paste(
"https://api.gbif.org/v1/occurrence/search?scientificName=",
taxon,
"&limit=300&offset=",
offset,
sep = ''
)
jsonget = jsonlite::fromJSON(html_str)
round = round + 1
if (is.null(nrow(jsonget$results))) {
print("ERR: 11")
return(jsonget)
} else {
hold[[round]] = jsonget$results
}
if (jsonget$endOfRecords == TRUE) {
n = 1
} else {
offset = offset + 300
}
if (offset > maxrec) {
break
}
}
cols = c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude');
df = hold[[1]][, c(cols )]
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
df[,2] = paste(df[,2], df[,3]);
df = df[,-3];
colnames(df) = c('ind_id', 'tax', 'lat', 'lon')
#df$tax = rep(tori, nrow(df));
return(df)
}
gbif_get(taxon)
24709000*(1000*1000)
24709000*(1000*1000) * 8*2/1000/1000/1000
24709000*(1000*1000) * 16 /1000/1000/1000
(24709000*(1000*1000) * 16) /1000/1000/1000
(24709000*(1000*1000) * 16) /1000/1000/1000/1000
5,700,000,000
5700000000
5700000000*16/1000/1000/1000
(5700000000*16)/1000/1000/1000
r = raster::raster('~/Desktop/cracle_testing/bio.gri')
r
31104000 *19
(31104000 *19) *16 /1000/1000/1000
(31104000*25 *19) *16 /1000/1000/1000
31104000*25
236/16
?densform
library(vegdistmod)
?densform
(300-(300*15))+150
(300-(300*.15))+150
600-(600*0.15)
600-(600*0.15) - 150
450-(450*0.15)
4814-1500-700
g = getextr('Abies lasiocarpa', clim = clim)
source('~/Desktop/cracle_testing/vegdistmod/R/get_gbif_direct.R')
g = getextr('Abies lasiocarpa', clim = clim)
clim = raster::stack('~/Desktop/phytoclim.gri')
clim = clim[[1]]
g = getextr('Abies lasiocarpa', clim = clim)
g
g = getextr(c('Abies lasiocarpa', 'Abies lasiocarpus'), clim = clim)
g
g = getextr(c('Abies lasiocarpus'), clim = clim)
g
g = getextr(c('Empetrum nigrum'), clim = clim)
g
ext = extent(c(-125, -40, 10, 66))
clim = crop(clim, ext)
g = getextr(c('Empetrum nigrum'), clim = clim)
g
source('~/Desktop/cracle_testing/vegdistmod/R/get_gbif_direct.R')
g = getextr(c('Empetrum nigrum'), clim = clim)
g
2**2
2**2
2^2
exp(2)
2exp(2)
exp(2)
exp(1)
setwd('~/GitHub/rasterExtras/')
devtools::check(cran=TRUE)
source('~/GitHub/rasterExtras/R/gkde_fun.R')
devtools::check(cran=TRUE)
